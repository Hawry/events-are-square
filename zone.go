package main

import (
	"bytes"
	"encoding/base64"
	"encoding/gob"
	"log"
)

const tzData = `Dv+BBAEC/4IAAQwBDAAA/hHe/4IA//cCQVgQRXVyb3BlL01hcmllaGFtbgJUSg1Bc2lhL0R1c2hhbmJlAlVZEkFtZXJpY2EvTW9udGV2aWRlbwJDSQ5BZnJpY2EvQWJpZGphbgJHVQxQYWNpZmljL0d1YW0CTUsNRXVyb3BlL1Nrb3BqZQJTWQ1Bc2lhL0RhbWFzY3VzAkRKD0FmcmljYS9Eamlib3V0aQJTTA9BZnJpY2EvRnJlZXRvd24CQ0EOQW1lcmljYS9EYXdzb24CQ0sRUGFjaWZpYy9SYXJvdG9uZ2ECR0wNQW1lcmljYS9UaHVsZQJXUwxQYWNpZmljL0FwaWECQkUPRXVyb3BlL0JydXNzZWxzAkVHDEFmcmljYS9DYWlybwJISw5Bc2lhL0hvbmdfS29uZwJLVwtBc2lhL0t1d2FpdAJQVw1QYWNpZmljL1BhbGF1AlNLEUV1cm9wZS9CcmF0aXNsYXZhAkNOC0FzaWEvVXJ1bXFpAkNZDEFzaWEvTmljb3NpYQJVTQxQYWNpZmljL1dha2UCWUUJQXNpYS9BZGVuAkFHD0FtZXJpY2EvQW50aWd1YQJBTw1BZnJpY2EvTHVhbmRhAkJMFUFtZXJpY2EvU3RfQmFydGhlbGVteQJFUg1BZnJpY2EvQXNtYXJhAk1OD0FzaWEvQ2hvaWJhbHNhbgJUVwtBc2lhL1RhaXBlaQJBRQpBc2lhL0R1YmFpAk1BEUFmcmljYS9DYXNhYmxhbmNhAlBIC0FzaWEvTWFuaWxhAlRNDUFzaWEvQXNoZ2FiYXQCU0kQRXVyb3BlL0xqdWJsamFuYQJCTw5BbWVyaWNhL0xhX1BhegJLUgpBc2lhL1Nlb3VsAlBZEEFtZXJpY2EvQXN1bmNpb24CQkkQQWZyaWNhL0J1anVtYnVyYQJETRBBbWVyaWNhL0RvbWluaWNhAkVFDkV1cm9wZS9UYWxsaW5uAk1NDEFzaWEvUmFuZ29vbgJWRw9BbWVyaWNhL1RvcnRvbGECREsRRXVyb3BlL0NvcGVuaGFnZW4CR0QPQW1lcmljYS9HcmVuYWRhAklSC0FzaWEvVGVocmFuAk1QDlBhY2lmaWMvU2FpcGFuAk1SEUFmcmljYS9Ob3Vha2Nob3R0AlJFDkluZGlhbi9SZXVuaW9uAlRSD0V1cm9wZS9Jc3RhbmJ1bAJDTA5QYWNpZmljL0Vhc3RlcgJKUApBc2lhL1Rva3lvAktFDkFmcmljYS9OYWlyb2JpAk5aD1BhY2lmaWMvQ2hhdGhhbQJQThBQYWNpZmljL1BpdGNhaXJuAktID0FzaWEvUGhub21fUGVuaAJMVRFFdXJvcGUvTHV4ZW1ib3VyZwJORQ1BZnJpY2EvTmlhbWV5Ak5GD1BhY2lmaWMvTm9yZm9sawJTQhNQYWNpZmljL0d1YWRhbGNhbmFsAlNaDkFmcmljYS9NYmFiYW5lAlRLD1BhY2lmaWMvRmFrYW9mbwJBURBBbnRhcmN0aWNhL1Ryb2xsAkJKEUFmcmljYS9Qb3J0by1Ob3ZvAlBFDEFtZXJpY2EvTGltYQJTTRFFdXJvcGUvU2FuX01hcmlubwJUVBVBbWVyaWNhL1BvcnRfb2ZfU3BhaW4CQk4LQXNpYS9CcnVuZWkCRkkPRXVyb3BlL0hlbHNpbmtpAkdGD0FtZXJpY2EvQ2F5ZW5uZQJLSRJQYWNpZmljL0tpcml0aW1hdGkCTEILQXNpYS9CZWlydXQCQkIQQW1lcmljYS9CYXJiYWRvcwJMUw1BZnJpY2EvTWFzZXJ1AkxUDkV1cm9wZS9WaWxuaXVzAlZJEUFtZXJpY2EvU3RfVGhvbWFzAkFVD0F1c3RyYWxpYS9FdWNsYQJQQQ5BbWVyaWNhL1BhbmFtYQJUTxFQYWNpZmljL1RvbmdhdGFwdQJBUxFQYWNpZmljL1BhZ29fUGFnbwJHUBJBbWVyaWNhL0d1YWRlbG91cGUCR1cNQWZyaWNhL0Jpc3NhdQJJUQxBc2lhL0JhZ2hkYWQCR0ERQWZyaWNhL0xpYnJldmlsbGUCR04OQWZyaWNhL0NvbmFrcnkCTUUQRXVyb3BlL1BvZGdvcmljYQJNWQxBc2lhL0t1Y2hpbmcCUEcUUGFjaWZpYy9Cb3VnYWludmlsbGUCU0cOQXNpYS9TaW5nYXBvcmUCU08QQWZyaWNhL01vZ2FkaXNodQJDWBBJbmRpYW4vQ2hyaXN0bWFzAkRPFUFtZXJpY2EvU2FudG9fRG9taW5nbwJFQxFQYWNpZmljL0dhbGFwYWdvcwJHVBFBbWVyaWNhL0d1YXRlbWFsYQJLWQ5BbWVyaWNhL0NheW1hbgJSUw9FdXJvcGUvQmVsZ3JhZGUCSFUPRXVyb3BlL0J1ZGFwZXN0AlNED0FmcmljYS9LaGFydG91bQJTShNBcmN0aWMvTG9uZ3llYXJieWVuAkZKDFBhY2lmaWMvRmlqaQJJVAtFdXJvcGUvUm9tZQJLThBBbWVyaWNhL1N0X0tpdHRzAkNDDEluZGlhbi9Db2NvcwJDRxJBZnJpY2EvQnJhenphdmlsbGUCRk8OQXRsYW50aWMvRmFyb2UCS1AOQXNpYS9QeW9uZ3lhbmcCUFQPQXRsYW50aWMvQXpvcmVzAlRaFEFmcmljYS9EYXJfZXNfU2FsYWFtAkJNEEF0bGFudGljL0Jlcm11ZGECRlIMRXVyb3BlL1BhcmlzAldGDlBhY2lmaWMvV2FsbGlzAkhOE0FtZXJpY2EvVGVndWNpZ2FscGECR1kOQW1lcmljYS9HdXlhbmECS00NSW5kaWFuL0NvbW9ybwJNVRBJbmRpYW4vTWF1cml0aXVzAkNXD0FtZXJpY2EvQ3VyYWNhbwJFVBJBZnJpY2EvQWRkaXNfQWJhYmECR0kQRXVyb3BlL0dpYnJhbHRhcgJJTRJFdXJvcGUvSXNsZV9vZl9NYW4CVEYQSW5kaWFuL0tlcmd1ZWxlbgJKTQ9BbWVyaWNhL0phbWFpY2ECT00LQXNpYS9NdXNjYXQCRUgPQWZyaWNhL0VsX0FhaXVuAkxSD0FmcmljYS9Nb25yb3ZpYQJCWg5BbWVyaWNhL0JlbGl6ZQJSVw1BZnJpY2EvS2lnYWxpAkFMDUV1cm9wZS9UaXJhbmUCQVIZQW1lcmljYS9BcmdlbnRpbmEvVXNodWFpYQJKTwpBc2lhL0FtbWFuAlVaDUFzaWEvVGFzaGtlbnQCQlESQW1lcmljYS9LcmFsZW5kaWprAkNGDUFmcmljYS9CYW5ndWkCREUPRXVyb3BlL0J1c2luZ2VuAkVTD0F0bGFudGljL0NhbmFyeQJMSQxFdXJvcGUvVmFkdXoCVUERRXVyb3BlL1phcG9yb3poeWUCQVoJQXNpYS9CYWt1AkNEEUFmcmljYS9MdWJ1bWJhc2hpAklMDkFzaWEvSmVydXNhbGVtAlBNEEFtZXJpY2EvTWlxdWVsb24CWkETQWZyaWNhL0pvaGFubmVzYnVyZwJLWglBc2lhL09yYWwCTFkOQWZyaWNhL1RyaXBvbGkCTVQMRXVyb3BlL01hbHRhAlBTC0FzaWEvSGVicm9uAlNODEFmcmljYS9EYWthcgJWThBBc2lhL0hvX0NoaV9NaW5oAkFEDkV1cm9wZS9BbmRvcnJhAkJSEkFtZXJpY2EvUmlvX0JyYW5jbwJDTw5BbWVyaWNhL0JvZ290YQJNUxJBbWVyaWNhL01vbnRzZXJyYXQCU0MLSW5kaWFuL01haGUCVFYQUGFjaWZpYy9GdW5hZnV0aQJCRwxFdXJvcGUvU29maWECSU4MQXNpYS9Lb2xrYXRhAkJTDkFtZXJpY2EvTmFzc2F1AlRED0FmcmljYS9OZGphbWVuYQJaTQ1BZnJpY2EvTHVzYWthAkZNDlBhY2lmaWMvS29zcmFlAkdIDEFmcmljYS9BY2NyYQJJTw1JbmRpYW4vQ2hhZ29zAkxDEEFtZXJpY2EvU3RfTHVjaWECTUcTSW5kaWFuL0FudGFuYW5hcml2bwJOUA5Bc2lhL0thdGhtYW5kdQJaVw1BZnJpY2EvSGFyYXJlAkNaDUV1cm9wZS9QcmFndWUCTVESQW1lcmljYS9NYXJ0aW5pcXVlAkNSEkFtZXJpY2EvQ29zdGFfUmljYQJTWBVBbWVyaWNhL0xvd2VyX1ByaW5jZXMCVkUPQW1lcmljYS9DYXJhY2FzAk5MEEV1cm9wZS9BbXN0ZXJkYW0CUUEKQXNpYS9RYXRhcgJTSBJBdGxhbnRpYy9TdF9IZWxlbmECTVoNQWZyaWNhL01hcHV0bwJUTAlBc2lhL0RpbGkCQ00NQWZyaWNhL0RvdWFsYQJQUhNBbWVyaWNhL1B1ZXJ0b19SaWNvAlNBC0FzaWEvUml5YWRoAlRIDEFzaWEvQmFuZ2tvawJWQxJBbWVyaWNhL1N0X1ZpbmNlbnQCQ1UOQW1lcmljYS9IYXZhbmECTUMNRXVyb3BlL01vbmFjbwJOTwtFdXJvcGUvT3NsbwJTVA9BZnJpY2EvU2FvX1RvbWUCR0cPRXVyb3BlL0d1ZXJuc2V5AkxWC0V1cm9wZS9SaWdhAlRODEFmcmljYS9UdW5pcwJVRw5BZnJpY2EvS2FtcGFsYQJWVQ1QYWNpZmljL0VmYXRlAkFNDEFzaWEvWWVyZXZhbgJMSwxBc2lhL0NvbG9tYm8CTUwNQWZyaWNhL0JhbWFrbwJNTwpBc2lhL01hY2F1AlVTEFBhY2lmaWMvSG9ub2x1bHUCU1ISQW1lcmljYS9QYXJhbWFyaWJvAkJGEkFmcmljYS9PdWFnYWRvdWdvdQJIUg1FdXJvcGUvWmFncmViAkhUFkFtZXJpY2EvUG9ydC1hdS1QcmluY2UCTVYPSW5kaWFuL01hbGRpdmVzAlBGD1BhY2lmaWMvR2FtYmllcgJSTxBFdXJvcGUvQnVjaGFyZXN0AkNIDUV1cm9wZS9adXJpY2gCU1YTQW1lcmljYS9FbF9TYWx2YWRvcgJTUwtBZnJpY2EvSnViYQJURwtBZnJpY2EvTG9tZQJCQQ9FdXJvcGUvU2FyYWpldm8CQlkMRXVyb3BlL01pbnNrAklTEkF0bGFudGljL1JleWtqYXZpawJMQQ5Bc2lhL1ZpZW50aWFuZQJNVw9BZnJpY2EvQmxhbnR5cmUCUlULQXNpYS9BbmFkeXICR0INRXVyb3BlL0xvbmRvbgJHUg1FdXJvcGUvQXRoZW5zAk5DDlBhY2lmaWMvTm91bWVhAklEDUFzaWEvSmF5YXB1cmECSkUNRXVyb3BlL0plcnNleQJTRRBFdXJvcGUvU3RvY2tob2xtAkFXDUFtZXJpY2EvQXJ1YmECRFoOQWZyaWNhL0FsZ2llcnMCUEwNRXVyb3BlL1dhcnNhdwJWQQ5FdXJvcGUvVmF0aWNhbgJGSxBBdGxhbnRpYy9TdGFubGV5Ak1GD0FtZXJpY2EvTWFyaWdvdAJOVQxQYWNpZmljL05pdWUCQlQMQXNpYS9UaGltcGh1AklFDUV1cm9wZS9EdWJsaW4CTVgWQW1lcmljYS9CYWhpYV9CYW5kZXJhcwJORwxBZnJpY2EvTGFnb3MCQVQNRXVyb3BlL1ZpZW5uYQJCSAxBc2lhL0JhaHJhaW4CQlcPQWZyaWNhL0dhYm9yb25lAkdNDUFmcmljYS9CYW5qdWwCR1ENQWZyaWNhL01hbGFibwJOSQ9BbWVyaWNhL01hbmFndWECTkEPQWZyaWNhL1dpbmRob2VrAk5SDVBhY2lmaWMvTmF1cnUCQUYKQXNpYS9LYWJ1bAJCRApBc2lhL0RoYWthAkNWE0F0bGFudGljL0NhcGVfVmVyZGUCR0UMQXNpYS9UYmlsaXNpAkdTFkF0bGFudGljL1NvdXRoX0dlb3JnaWECTUgRUGFjaWZpYy9Ld2FqYWxlaW4CVEMSQW1lcmljYS9HcmFuZF9UdXJrAllUDkluZGlhbi9NYXlvdHRlAkFJEEFtZXJpY2EvQW5ndWlsbGECS0cMQXNpYS9CaXNoa2VrAk1ED0V1cm9wZS9DaGlzaW5hdQJQSwxBc2lhL0thcmFjaGk=`

func createMap() map[string]string {
	rmap := make(map[string]string)
	b, err := base64.StdEncoding.DecodeString(tzData)
	if err != nil {
		log.Printf("alert: could not decode tzData (%v)", err)
		return rmap
	}
	bb := bytes.Buffer{}
	bb.Write(b)
	d := gob.NewDecoder(&bb)
	err = d.Decode(&rmap)
	if err != nil {
		log.Printf("alert: could not decode byte data (%v)", err)
		return make(map[string]string)
	}
	return rmap
}
